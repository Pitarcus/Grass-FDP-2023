// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CullGrass


struct GrassData
{
    float3 position;
    float3 scale;
};

StructuredBuffer<GrassData> _GrassDataBuffer;
AppendStructuredBuffer<GrassData> _CulledGrassOutputBuffer;
AppendStructuredBuffer<GrassData> _CulledGrassOutputBufferLOD;

RWStructuredBuffer<uint> _ArgsBuffer;
RWStructuredBuffer<uint> _ArgsBufferLOD;

float4x4 MATRIX_VP;
float _CullDistance;
float3 _CameraPosition;
float _LOD_DISTANCE;

uint _GrassDataNumberofElements;

[numthreads(128,1,1)]
void CullGrass (uint3 id : SV_DispatchThreadID)
{
    if(id.x < _GrassDataNumberofElements) 
   {
        float4 position = float4(_GrassDataBuffer[id.x].position.xyz, 1.0f);
    
        float4 viewspace = mul(MATRIX_VP, position);

        float3 clipspace = viewspace.xyz;
        clipspace /= -viewspace.w;  // true clip space aka NDC(normalized device coordinates)

        // Get a bigger bounding box
        clipspace.x = clipspace.x / 2.0f + 0.5f;
        clipspace.y = clipspace.y / 2.0f + 0.5f; 
        clipspace.z = -viewspace.w;

        bool inView = clipspace.x < -0.2f || clipspace.x > 1.2f || clipspace.z <= -0.1f ? 0 : 1;

        float distanceToCamera = distance(_CameraPosition, position.xyz);

        bool withinDistance = distanceToCamera < _CullDistance;

        if(withinDistance && inView)
        {

            if(distanceToCamera < _LOD_DISTANCE && _GrassDataBuffer[id.x].scale.y > 0.25f) 
            {
                InterlockedAdd(_ArgsBuffer[1], 1);
                _CulledGrassOutputBuffer.Append(_GrassDataBuffer[id.x]);
            }
            else 
            {
                InterlockedAdd(_ArgsBufferLOD[1], 1);
                _CulledGrassOutputBufferLOD.Append(_GrassDataBuffer[id.x]);
            }
        }
    }
}

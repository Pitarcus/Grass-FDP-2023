// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ForceGPUFluidSim3D


RWTexture3D<float> velocityBuffer;
Texture3D<float> prevVelocityBuffer;
Texture3D<float> velocitySourcesBuffer;


//RWStructuredBuffer<float3> velocityBuffer;
//StructuredBuffer<float3> prevVelocityBuffer;
//StructuredBuffer<float3>  velocitySourcesBuffer;

uint _numberOfVoxels;
uint _sizeX;    // It is really, the size - 2 (last voxel not in the boundary)
uint _sizeY;
uint _sizeZ;


uint IndexFrom3DCoord(uint x, uint y, uint z) 
{
    return x + y * (_sizeX+2) + z * (_sizeX+2) * (_sizeY+2);
}

[numthreads(8,8,8)]
void ForceGPUFluidSim3D(uint3 id : SV_DispatchThreadID) 
{
    uint voxelIndex = IndexFrom3DCoord(id.x, id.y, id.z);
    if(voxelIndex < _numberOfVoxels) 
    {
        float sourceForce = velocitySourcesBuffer[id];
        if (sourceForce != 0) 
        {
            velocityBuffer[id] = prevVelocityBuffer[id] + sourceForce; //+ gravityForce;
        }
        else
        {
            velocityBuffer[id] = prevVelocityBuffer[id]; //+ gravityForce
        }
    }
}
